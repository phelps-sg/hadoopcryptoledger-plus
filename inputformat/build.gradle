/*
 * Copyright 2016 ZuInnoTe (JÃ¶rn Franke) <zuinnote@gmail.com>
 *   <p>
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *   <p>
 *   http://www.apache.org/licenses/LICENSE-2.0
 *   <p>
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'info.solidsoft.pitest'

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

group = "com.mesonomics"
archivesBaseName = "hadoopcryptoledger-plus-fileformat"
version = "0.7"

jar {
    manifest {
        attributes 'Implementation-Title': 'hadoopcryptoledger-plus - Hadoop CryptoLedger Analytics Library - Inputformat',
                        'Implementation-Version': archiveVersion
    }
    baseName = archivesBaseName
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
    }
}

configurations {
	umlDoclet
	provided
	integrationTestCompile.extendsFrom testCompile
    	integrationTestRuntime.extendsFrom testRuntime
}

eclipse {

  classpath {
    plusConfigurations += [ configurations.provided ]
  }
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
     integrationTest {
        java {
            compileClasspath += main.output + test.output + configurations.provided
            runtimeClasspath += main.output + test.output + configurations.provided
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

pitest {
    targetClasses = ['org.zuinnote.hadoop.bitcoin.format.common.BitcoinUtil','org.zuinnote.hadoop.bitcoin.format.common.BitcoinScriptPatternParser','org.zuinnote.hadoop.namecoin.format.common.NamecoinUtil','org.zuinnote.hadoop.ethereum.format.common.EthereumUtil']  //by default "${project.group}.*"
    targetTests = ['org.zuinnote.hadoop.bitcoin.format.common.BitcoinUtilTest','org.zuinnote.hadoop.bitcoin.format.common.BitcoinScriptPatternParserTest','org.zuinnote.hadoop.namecoin.format.common.NamecoinUtilTest','org.zuinnote.hadoop.ethereum.format.common.EthereumUtilTest']
    timestampedReports = false
    threads = 4
    outputFormats = ['XML', 'HTML']
}

javadoc.classpath += configurations.provided


task hadoopCryptoLedgerJavaDocs(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test {
    testLogging.showStandardStreams = true
    useJUnitPlatform()
}

artifacts {
    archives hadoopCryptoLedgerJavaDocs, sourcesJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId archivesBaseName
            from components.java
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            pom.project {
                name 'hadoopcryptoledger-plus'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Fork of ZuInnoTe/hadoopcryptoledger with additional functionality to compute block hashes and addresses as they appear in blockexplorer'
                url 'https://github.com/phelps-sg/hadoopcryptoledger-plus'

                scm {
                    connection 'scm:svn:https://github.com/phelps-sg/hadoopcryptoledger-plus.git'
                    developerConnection'scm:svn:https://github.com/phelps-sg/hadoopcryptoledger-plus.git'
                    url 'https://github.com/phelps-sg/hadoopcryptoledger-plus'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'phelps-sg'
                        name 'Steve Phelps'
                        email 'sphelps@sphelps.net'
                    }
                }
            }
        }
    }
}

dependencies {
    // uml doclet for using planuml in javadoc
    umlDoclet "nl.talsmasoftware:umldoclet:2.0.7"
    // bouncycastle libraries - only for Ethereum utility functions needed
    provided("org.bouncycastle:bcprov-ext-jdk15on:1.64")
    // hadoop libraries
   provided("org.apache.hadoop:hadoop-common:2.7.0")
   provided("org.apache.hadoop:hadoop-mapreduce-client-common:2.7.0")
   // log4j2
   provided("org.apache.logging.log4j:log4j-api:2.12.1")
   // test
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2'
	testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2'
    compile 'org.bitcoinj:bitcoinj-core:0.15.9'
}
