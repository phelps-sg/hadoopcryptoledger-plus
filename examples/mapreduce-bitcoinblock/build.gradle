/*
 * Copyright 2016 ZuInnoTe (JÃ¶rn Franke) <zuinnote@gmail.com>
 *   <p>
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *   <p>
 *   http://www.apache.org/licenses/LICENSE-2.0
 *   <p>
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'application'


compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Example - MR job (BitcoinBlock) for analysing Bitcoin data using hadoopcryptoledger', 'Implementation-Version': version
    }

    baseName = 'example-hcl-mr-bitcoinblock'
    version = '0.1.0'
   // note this builds one fat jar and it is not recommended for production use - just for illustration purpose
   from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

mainClassName = "org.zuinnote.hadoop.bitcoin.example.driver.BitcoinBlockCounterDriver"

repositories {
    mavenCentral()
    mavenLocal()
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
    }
}



configurations {
	provided
	testProvided
	testIntegrationCompile.extendsFrom testCompile
	testIntegrationRuntime.extendsFrom testRuntime
}

eclipse {

  classpath {
    plusConfigurations += [ configurations.provided ]
    plusConfigurations += [ configurations.testProvided ]
    plusConfigurations += [ configurations.testIntegrationCompile ]
	plusConfigurations += [ configurations.testIntegrationRuntime ]
  }
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
     testIntegration {
        java {
            compileClasspath += main.output + test.output + configurations.provided
            runtimeClasspath += main.output + test.output + configurations.provided
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
	}
}

dependencies {
   // hadoop lib for driver
     provided("org.apache.hadoop:hadoop-client:2.7.0")
       // hadoop crypto ledger library
   compile("com.github.zuinnote:hadoopcryptoledger-fileformat:1.2.1")
   // testing
    testCompile group: 'org.jmockit', name: 'jmockit', version: '1.48'
     testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2'
     testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2'
    testIntegrationRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2'
	testIntegrationRuntime group: 'org.junit.platform', name: 'junit-platform-console', version: '1.5.2'
   	testIntegrationCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.7.0'

}

task testIntegration(type: Test) {
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
    useJUnitPlatform()
}

check.dependsOn testIntegration
testIntegration.mustRunAfter test


uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
